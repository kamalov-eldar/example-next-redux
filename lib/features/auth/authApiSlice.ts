// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { AuthApiResponse, setAuthUser } from "../counter/counterSlice";

// Define a service using a base URL and expected endpoints
export const authApiSlice = createApi({
    baseQuery: fetchBaseQuery({
        baseUrl: "https://6ede402e6a352dfb.mokky.dev",
        method: "POST",
        headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
        },
    }),
    reducerPath: "authApi",
    // tagTypes  используются для кэширования и аннулирования.
    tagTypes: ["Auth"],
    endpoints: (build) => ({
        loginByEmail: build.mutation<AuthApiResponse, { email: string; password: string }>({
            query: (loginData) => ({
                url: "/auth",
                method: "POST",
                body: loginData,
            }),
            async onQueryStarted(arg, { dispatch, getState, queryFulfilled, requestId, extra, getCacheEntry }) {
               // dispatch(setAuthUser());
            },
        }),
        getAuthUser: build.query<AuthApiResponse, string>({
            query: (token) => ({
                url: "/auth_me",
                method: "GET",
                headers: {
                    Authorization: `Bearer ${token}`,
                },
            }),
        }),
    }),
});

/* const res = await fetch("https://9303851354d5e8f0.mokky.dev/auth_me", {
  method: "GET",
  headers: {
    Authorization: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
  }
})
 */

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const { useLoginByEmailMutation, useGetAuthUserQuery } = authApiSlice;
