// Need to use the React-specific entry point to import `createApi`
/*import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";



// Define a service using a base URL and expected endpoints
export const authApiSlice = createApi({
    baseQuery: fetchBaseQuery({ baseUrl: "https://6ede402e6a352dfb.mokky.dev/auth" }),
    reducerPath: "authApi",
    // Tag types are used for caching and invalidation.
    tagTypes: ["Auth"],
    endpoints: (build) => ({
        // Supply generics for the return type (in this case `QuotesApiResponse`)
        // and the expected query argument. If there is no argument, use `void`
        // for the argument type instead.
        getQuotes: build.query<AuthApiResponse, number>({
            query: (limit = 10) => `?limit=${limit}`,
            // `providesTags` determines which 'tag' is attached to the
            // cached data returned by the query.
            providesTags: (result, error, id) => [{ type: "Quotes", id }],
        }),
    }),
});

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const { useGetQuotesQuery } = quotesApiSlice;
*/
